#!/bin/bash

if [ -f ./setup ]
then
  source ./setup
fi

if [ -f ./custom ]
then
  source ./custom
fi

if [ -d ./custom.d ]
then
  for FILE in $(find ./custom.d -type f -iname \*.sh | sort)
  do
    source ${FILE}
  done
fi

STARTCMD="su-exec mongodb mongod --nounixsocket"

[[ -n "${MONGODB_CONFIG}" ]] && STARTCMD="${STARTCMD} --config ${MONGODB_CONFIG}"
[[ "${MONGODB_VERBOSE}" == "true" || "${MONGODB_VERBOSE}" == "1" ]] && STARTCMD="${STARTCMD} --verbose"
[[ "${MONGODB_QUIET}" == "true" || "${MONGODB_QUIET}" == "1" ]] && STARTCMD="${STARTCMD} --quiet"
[[ "${MONGODB_IPV6}" == "true" || "${MONGODB_IPV6}" == "1" ]] && STARTCMD="${STARTCMD} --ipv6"
[[ -n "${MONGODB_MAX_CONNS}" ]] && STARTCMD="${STARTCMD} --maxConns ${MONGODB_MAX_CONNS}"
[[ -n "${MONGODB_TIMESTAMP_FORMAT}" ]] && STARTCMD="${STARTCMD} --timeStampFormat ${MONGODB_TIMESTAMP_FORMAT}"
[[ -n "${MONGODB_KEY_FILE}" ]] && STARTCMD="${STARTCMD} --keyFile ${MONGODB_KEY_FILE}"
[[ -n "${MONGODB_SET_PARAMETER}" ]] && STARTCMD="${STARTCMD} --setParameter ${MONGODB_SET_PARAMETER}"
[[ "${MONGODB_HTTPINTERFACE}" == "true" || "${MONGODB_HTTPINTERFACE}" == "1" ]] && STARTCMD="${STARTCMD} --httpinterface"
[[ "${MONGODB_TRANSITION_TO_AUTH}" == "true" || "${MONGODB_TRANSITION_TO_AUTH}" == "1" ]] && STARTCMD="${STARTCMD} --transitionToAuth"
[[ -n "${MONGODB_CLUSTER_AUTH_MODE}" ]] && STARTCMD="${STARTCMD} --clusterAuthMode ${MONGODB_CLUSTER_AUTH_MODE}"
[[ -n "${MONGODB_NETWORK_MESSAGE_COMPRESSORS}" ]] && STARTCMD="${STARTCMD} --networkMessageCompressors ${MONGODB_NETWORK_MESSAGE_COMPRESSORS}"
[[ "${MONGODB_JSONP}" == "true" || "${MONGODB_JSONP}" == "1" ]] && STARTCMD="${STARTCMD} --jsonp"
[[ "${MONGODB_REST}" == "true" || "${MONGODB_REST}" == "1" ]] && STARTCMD="${STARTCMD} --rest"
[[ -n "${MONGODB_SLOWMS}" ]] && STARTCMD="${STARTCMD} --slowms ${MONGODB_SLOWMS}"
[[ -n "${MONGODB_PROFILE}" ]] && STARTCMD="${STARTCMD} --profile ${MONGODB_PROFILE}"
[[ "${MONGODB_CPU}" == "true" || "${MONGODB_CPU}" == "1" ]] && STARTCMD="${STARTCMD} --cpu"
[[ "${MONGODB_NO_INDEX_BUILD_RETRY}" == "true" || "${MONGODB_NO_INDEX_BUILD_RETRY}" == "1" ]] && STARTCMD="${STARTCMD} --noIndexBuildRetry"
[[ "${MONGODB_NOSCRIPTING}" == "true" || "${MONGODB_NOSCRIPTING}" == "1" ]] && STARTCMD="${STARTCMD} --noscripting"
[[ "${MONGODB_NOTABLESCAN}" == "true" || "${MONGODB_NOTABLESCAN}" == "1" ]] && STARTCMD="${STARTCMD} --notablescan"
[[ -n "${MONGODB_OPLOG_SIZE}" ]] && STARTCMD="${STARTCMD} --oplogSize ${MONGODB_OPLOG_SIZE}"
[[ -n "${MONGODB_REPL_SET}" ]] && STARTCMD="${STARTCMD} --replSet ${MONGODB_REPL_SET}"
[[ -n "${MONGODB_REPL_INDEX_PREFETCH}" ]] && STARTCMD="${STARTCMD} --replIndexPrefetch ${MONGODB_REPL_INDEX_PREFETCH}"
[[ "${MONGODB_ENABLE_MAJORITY_READ_CONCERN}" == "true" || "${MONGODB_ENABLE_MAJORITY_READ_CONCERN}" == "1" ]] && STARTCMD="${STARTCMD} --enableMajorityReadConcern"
[[ "${MONGODB_CONFIGSVR}" == "true" || "${MONGODB_CONFIGSVR}" == "1" ]] && STARTCMD="${STARTCMD} --configsvr"
[[ "${MONGODB_SHARDSVR}" == "true" || "${MONGODB_SHARDSVR}" == "1" ]] && STARTCMD="${STARTCMD} --shardsvr"
[[ "${MONGODB_SSL_ON_NORMAL_PORTS}" == "true" || "${MONGODB_SSL_ON_NORMAL_PORTS}" == "1" ]] && STARTCMD="${STARTCMD} --sslOnNormalPorts"
[[ -n "${MONGODB_SSL_MODE}" ]] && STARTCMD="${STARTCMD} --sslMode ${MONGODB_SSL_MODE}"
[[ -n "${MONGODB_SSL_PEM_KEY_FILE}" ]] && STARTCMD="${STARTCMD} --sslPEMKeyFile ${MONGODB_SSL_PEM_KEY_FILE}"
[[ -n "${MONGODB_SSL_PEM_KEY_PASSWORD}" ]] && STARTCMD="${STARTCMD} --sslPEMKeyPassword ${MONGODB_SSL_PEM_KEY_PASSWORD}"
[[ -n "${MONGODB_SSL_CLUSTER_FILE}" ]] && STARTCMD="${STARTCMD} --sslClusterFile ${MONGODB_SSL_CLUSTER_FILE}"
[[ -n "${MONGODB_SSL_CLUSTER_PASSWORD}" ]] && STARTCMD="${STARTCMD} --sslClusterPassword ${MONGODB_SSL_CLUSTER_PASSWORD}"
[[ -n "${MONGODB_SSL_CA_FILE}" ]] && STARTCMD="${STARTCMD} --sslCAFile ${MONGODB_SSL_CA_FILE}"
[[ -n "${MONGODB_SSL_CRL_FILE}" ]] && STARTCMD="${STARTCMD} --sslCRLFile ${MONGODB_SSL_CRL_FILE}"
[[ -n "${MONGODB_SSL_DISABLED_PROTOCOLS}" ]] && STARTCMD="${STARTCMD} --sslDisabledProtocols ${MONGODB_SSL_DISABLED_PROTOCOLS}"
[[ -n "${MONGODB_SSL_WEAK_CERTIFICATE_VALIDATION}" ]] && STARTCMD="${STARTCMD} --sslWeakCertificateValidation ${MONGODB_SSL_WEAK_CERTIFICATE_VALIDATION}"
[[ "${MONGODB_SSL_ALLOW_CONNECTIONS_WITHOUT_CERTIFICATES}" == "true" || "${MONGODB_SSL_ALLOW_CONNECTIONS_WITHOUT_CERTIFICATES}" == "1" ]] && STARTCMD="${STARTCMD} --sslAllowConnectionsWithoutCertificates"
[[ "${MONGODB_SSL_ALLOW_INVALID_HOSTNAMES}" == "true" || "${MONGODB_SSL_ALLOW_INVALID_HOSTNAMES}" == "1" ]] && STARTCMD="${STARTCMD} --sslAllowInvalidHostnames"
[[ "${MONGODB_SSL_ALLOW_INVALID_CERTIFICATES}" == "true" || "${MONGODB_SSL_ALLOW_INVALID_CERTIFICATES}" == "1" ]] && STARTCMD="${STARTCMD} --sslAllowInvalidCertificates"
[[ "${MONGODB_SSL_FIPS_MODE}" == "true" || "${MONGODB_SSL_FIPS_MODE}" == "1" ]] && STARTCMD="${STARTCMD} --sslFIPSMode"
[[ -n "${MONGODB_STORAGE_ENGINE}" ]] && STARTCMD="${STARTCMD} --storageEngine ${MONGODB_STORAGE_ENGINE}"
[[ -n "${MONGODB_DBPATH}" ]] && STARTCMD="${STARTCMD} --dbpath ${MONGODB_DBPATH}"
[[ "${MONGODB_DIRECTORYPERDB}" == "true" || "${MONGODB_DIRECTORYPERDB}" == "1" ]] && STARTCMD="${STARTCMD} --directoryperdb"
[[ "${MONGODB_NOPREALLOC}" == "true" || "${MONGODB_NOPREALLOC}" == "1" ]] && STARTCMD="${STARTCMD} --noprealloc"
[[ -n "${MONGODB_NSSIZE}" ]] && STARTCMD="${STARTCMD} --nssize ${MONGODB_NSSIZE}"
[[ "${MONGODB_QUOTA}" == "true" || "${MONGODB_QUOTA}" == "1" ]] && STARTCMD="${STARTCMD} --quota"
[[ -n "${MONGODB_QUOTA_FILES}" ]] && STARTCMD="${STARTCMD} --quotaFiles ${MONGODB_QUOTA_FILES}"
[[ "${MONGODB_SMALLFILES}" == "true" || "${MONGODB_SMALLFILES}" == "1" ]] && STARTCMD="${STARTCMD} --smallfiles"
[[ -n "${MONGODB_SYNCDELAY}" ]] && STARTCMD="${STARTCMD} --syncdelay ${MONGODB_SYNCDELAY}"
[[ -n "${MONGODB_REPAIRPATH}" ]] && STARTCMD="${STARTCMD} --repairpath ${MONGODB_REPAIRPATH}"
[[ "${MONGODB_NOJOURNAL}" == "true" || "${MONGODB_NOJOURNAL}" == "1" ]] && STARTCMD="${STARTCMD} --nojournal"
[[ -n "${MONGODB_JOURNAL_OPTIONS}" ]] && STARTCMD="${STARTCMD} --journalOptions ${MONGODB_JOURNAL_OPTIONS}"
[[ -n "${MONGODB_JOURNAL_COMMIT_INTERVAL}" ]] && STARTCMD="${STARTCMD} --journalCommitInterval ${MONGODB_JOURNAL_COMMIT_INTERVAL}"
[[ -n "${MONGODB_WIRED_TIGER_CACHE_SIZE}" ]] && STARTCMD="${STARTCMD} --wiredTigerCacheSizeGB ${MONGODB_WIRED_TIGER_CACHE_SIZE}"
[[ -n "${MONGODB_WIRED_TIGER_STATISTICS_LOG_DELAY}" ]] && STARTCMD="${STARTCMD} --wiredTigerStatisticsLogDelaySecs ${MONGODB_WIRED_TIGER_STATISTICS_LOG_DELAY}"
[[ -n "${MONGODB_WIRED_TIGER_JOURNAL_COMPRESSOR}" ]] && STARTCMD="${STARTCMD} --wiredTigerJournalCompressor ${MONGODB_WIRED_TIGER_JOURNAL_COMPRESSOR}"
[[ -n "${MONGODB_WIRED_TIGER_DIRECTORY_FOR_INDEXES}" ]] && STARTCMD="${STARTCMD} --wiredTigerDirectoryForIndexes ${MONGODB_WIRED_TIGER_DIRECTORY_FOR_INDEXES}"
[[ -n "${MONGODB_WIRED_TIGER_COLLECTION_BLOCK_COMPRESSOR}" ]] && STARTCMD="${STARTCMD} --wiredTigerCollectionBlockCompressor ${MONGODB_WIRED_TIGER_COLLECTION_BLOCK_COMPRESSOR}"
[[ -n "${MONGODB_WIRED_TIGER_INDEX_PREFIX_COMPRESSION}" ]] && STARTCMD="${STARTCMD} --wiredTigerIndexPrefixCompression ${MONGODB_WIRED_TIGER_INDEX_PREFIX_COMPRESSION}"

[[ "${MONGODB_PERFORM_REPAIR}" == "true" || "${MONGODB_PERFORM_REPAIR}" == "1" ]] && ${STARTCMD} --repair
[[ "${MONGODB_PERFORM_UPGRADE}" == "true" || "${MONGODB_PERFORM_UPGRADE}" == "1" ]] && ${STARTCMD} --upgrade

if [[ "${MONGODB_AUTH}" == "true" || "${MONGODB_AUTH}" == "1" ]]
then
  echo "> start local service"
  ${STARTCMD} --fork --logpath /dev/stdout --bind_ip 127.0.0.1
  wait-for-it localhost:27017

  if [[ -n "${MONGODB_ROOT_USERNAME}" && -n "${MONGODB_ROOT_PASSWORD}" ]]
  then
    if [[ "$(mongo --quiet --eval "print(db.system.users.find({user:'${MONGODB_ROOT_USERNAME}'}).count())" ${MONGODB_AUTH_DB})" == "0" ]]
    then
      echo "> create root user"
      mongo --quiet --eval "db.createUser({user: '${MONGODB_ROOT_USERNAME}', pwd: '${MONGODB_ROOT_PASSWORD}', roles: ['readWriteAnyDatabase','dbAdminAnyDatabase','userAdminAnyDatabase','clusterAdmin']})" ${MONGODB_AUTH_DB}
    else
      echo "> update root user"
      mongo --quiet --eval "db.changeUserPassword('${MONGODB_ROOT_USERNAME}', '${MONGODB_ROOT_PASSWORD}')" ${MONGODB_AUTH_DB}
    fi
  fi

  if [[ -n "${MONGODB_USERNAME}" && -n "${MONGODB_PASSWORD}"  ]]
  then
    MONGODB_DATABASE=${MONGODB_DATABASE:-$MONGODB_USERNAME}

    if [[ "$(mongo --quiet --eval "print(db.system.users.find({user:'${MONGODB_USERNAME}'}).count())" ${MONGODB_AUTH_DB})" == "0" ]]
    then
      echo "> create additional user"
      mongo --quiet --eval "db.createUser({user: '${MONGODB_USERNAME}', pwd: '${MONGODB_PASSWORD}', roles: [{role: 'readWrite', db: '${MONGODB_DATABASE}'}]})" ${MONGODB_AUTH_DB}
    else
      echo "> update additional user"
      mongo --quiet --eval "db.changeUserPassword('${MONGODB_USERNAME}', '${MONGODB_PASSWORD}')" ${MONGODB_AUTH_DB}
    fi
  fi

  echo "> stop local service"
  ${STARTCMD} --shutdown
fi

[[ "${MONGODB_NOAUTH}" == "true" || "${MONGODB_NOAUTH}" == "1" ]] && STARTCMD="${STARTCMD} --noauth"
[[ "${MONGODB_AUTH}" == "true" || "${MONGODB_AUTH}" == "1" ]] && STARTCMD="${STARTCMD} --auth"

echo "> starting mongodb service"
exec ${STARTCMD} --bind_ip 0.0.0.0
