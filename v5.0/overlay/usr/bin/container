#!/usr/bin/env bash
set -eo pipefail
source /usr/bin/entrypoint

for FILE in $(find /etc/container.d -type f -iname \*.sh | sort); do
    source ${FILE}
done

pushd ${MONGODB_DBPATH} >/dev/null
    STARTCMD="su-exec mongodb mongod --nounixsocket"

    [[ -n "${MONGODB_NETWORK_MESSAGE_COMPRESSORS}" ]] && STARTCMD="${STARTCMD} --networkMessageCompressors ${MONGODB_NETWORK_MESSAGE_COMPRESSORS}"
    [[ -n "${MONGODB_CONFIG}" ]] && STARTCMD="${STARTCMD} --config ${MONGODB_CONFIG}"
    [[ -n "${MONGODB_CONFIG_EXPAND}" ]] && STARTCMD="${STARTCMD} --configExpand ${MONGODB_CONFIG_EXPAND}"
    [[ "${MONGODB_IPV6}" == "true" || "${MONGODB_IPV6}" == "1" ]] && STARTCMD="${STARTCMD} --ipv6"
    [[ -n "${MONGODB_LISTEN_BACKLOG}" ]] && STARTCMD="${STARTCMD} --listenBacklog ${MONGODB_LISTEN_BACKLOG}"
    [[ -n "${MONGODB_MAX_CONNS}" ]] && STARTCMD="${STARTCMD} --maxConns ${MONGODB_MAX_CONNS}"
    [[ -n "${MONGODB_TIMEZONE_INFO}" ]] && STARTCMD="${STARTCMD} --timeZoneInfo ${MONGODB_TIMEZONE_INFO}"
    [[ "${MONGODB_VERBOSE}" == "true" || "${MONGODB_VERBOSE}" == "1" ]] && STARTCMD="${STARTCMD} --verbose"
    [[ "${MONGODB_QUIET}" == "true" || "${MONGODB_QUIET}" == "1" ]] && STARTCMD="${STARTCMD} --quiet"
    [[ -n "${MONGODB_TIMESTAMP_FORMAT}" ]] && STARTCMD="${STARTCMD} --timeStampFormat ${MONGODB_TIMESTAMP_FORMAT}"
    [[ -n "${MONGODB_SET_PARAMETER}" ]] && STARTCMD="${STARTCMD} --setParameter ${MONGODB_SET_PARAMETER}"
    [[ "${MONGODB_TRANSITION_TO_AUTH}" == "true" || "${MONGODB_TRANSITION_TO_AUTH}" == "1" ]] && STARTCMD="${STARTCMD} --transitionToAuth"
    [[ -n "${MONGODB_SLOWMS}" ]] && STARTCMD="${STARTCMD} --slowms ${MONGODB_SLOWMS}"
    [[ -n "${MONGODB_SLOW_OP_SAMPLE_RATE}" ]] && STARTCMD="${STARTCMD} --slowOpSampleRate ${MONGODB_SLOW_OP_SAMPLE_RATE}"
    [[ -n "${MONGODB_PROFILE_FILTER}" ]] && STARTCMD="${STARTCMD} --profileFilter ${MONGODB_PROFILE_FILTER}"
    [[ -n "${MONGODB_CLUSTER_IP_SOURCE_WHITELIST}" ]] && STARTCMD="${STARTCMD} --clusterIpSourceWhitelist ${MONGODB_CLUSTER_IP_SOURCE_WHITELIST}"
    [[ -n "${MONGODB_PROFILE}" ]] && STARTCMD="${STARTCMD} --profile ${MONGODB_PROFILE}"
    [[ "${MONGODB_CPU}" == "true" || "${MONGODB_CPU}" == "1" ]] && STARTCMD="${STARTCMD} --cpu"
    [[ "${MONGODB_SYSINFO}" == "true" || "${MONGODB_SYSINFO}" == "1" ]] && STARTCMD="${STARTCMD} --sysinfo"
    [[ "${MONGODB_NOSCRIPTING}" == "true" || "${MONGODB_NOSCRIPTING}" == "1" ]] && STARTCMD="${STARTCMD} --noscripting"
    [[ "${MONGODB_NOTABLESCAN}" == "true" || "${MONGODB_NOTABLESCAN}" == "1" ]] && STARTCMD="${STARTCMD} --notablescan"
    [[ -n "${MONGODB_KEY_FILE}" ]] && STARTCMD="${STARTCMD} --keyFile ${MONGODB_KEY_FILE}"
    [[ -n "${MONGODB_CLUSTER_AUTH_MODE}" ]] && STARTCMD="${STARTCMD} --clusterAuthMode ${MONGODB_CLUSTER_AUTH_MODE}"
    [[ -n "${MONGODB_OPLOG_SIZE}" ]] && STARTCMD="${STARTCMD} --oplogSize ${MONGODB_OPLOG_SIZE}"
    [[ -n "${MONGODB_REPL_SET}" ]] && STARTCMD="${STARTCMD} --replSet ${MONGODB_REPL_SET}"
    [[ "${MONGODB_ENABLE_MAJORITY_READ_CONCERN}" == "true" || "${MONGODB_ENABLE_MAJORITY_READ_CONCERN}" == "1" ]] && STARTCMD="${STARTCMD} --enableMajorityReadConcern"
    [[ "${MONGODB_CONFIGSVR}" == "true" || "${MONGODB_CONFIGSVR}" == "1" ]] && STARTCMD="${STARTCMD} --configsvr"
    [[ "${MONGODB_SHARDSVR}" == "true" || "${MONGODB_SHARDSVR}" == "1" ]] && STARTCMD="${STARTCMD} --shardsvr"
    [[ -n "${MONGODB_STORAGE_ENGINE}" ]] && STARTCMD="${STARTCMD} --storageEngine ${MONGODB_STORAGE_ENGINE}"
    [[ -n "${MONGODB_DBPATH}" ]] && STARTCMD="${STARTCMD} --dbpath ${MONGODB_DBPATH}"
    [[ "${MONGODB_DIRECTORYPERDB}" == "true" || "${MONGODB_DIRECTORYPERDB}" == "1" ]] && STARTCMD="${STARTCMD} --directoryperdb"
    [[ -n "${MONGODB_SYNCDELAY}" ]] && STARTCMD="${STARTCMD} --syncdelay ${MONGODB_SYNCDELAY}"
    [[ -n "${MONGODB_JOURNAL_COMMIT_INTERVAL}" ]] && STARTCMD="${STARTCMD} --journalCommitInterval ${MONGODB_JOURNAL_COMMIT_INTERVAL}"
    [[ "${MONGODB_NO_INDEX_BUILD_RETRY}" == "true" || "${MONGODB_NO_INDEX_BUILD_RETRY}" == "1" ]] && STARTCMD="${STARTCMD} --noIndexBuildRetry"
    [[ "${MONGODB_NOJOURNAL}" == "true" || "${MONGODB_NOJOURNAL}" == "1" ]] && STARTCMD="${STARTCMD} --nojournal"
    [[ -n "${MONGODB_OPLOG_MIN_RETENTION_HOURS}" ]] && STARTCMD="${STARTCMD} --oplogMinRetentionHours ${MONGODB_OPLOG_MIN_RETENTION_HOURS}"
    [[ -n "${MONGODB_WIRED_TIGER_CACHE_SIZE}" ]] && STARTCMD="${STARTCMD} --wiredTigerCacheSizeGB ${MONGODB_WIRED_TIGER_CACHE_SIZE}"
    [[ -n "${MONGODB_WIRED_TIGER_MAX_CACHE_OVERFLOW_FILESIZE}" ]] && STARTCMD="${STARTCMD} --wiredTigerMaxCacheOverflowFileSizeGB ${MONGODB_WIRED_TIGER_MAX_CACHE_OVERFLOW_FILESIZE}"
    [[ -n "${MONGODB_ZSTD_DEFAULT_COMPRESSION_LEVEL}" ]] && STARTCMD="${STARTCMD} --zstdDefaultCompressionLevel ${MONGODB_ZSTD_DEFAULT_COMPRESSION_LEVEL}"
    [[ -n "${MONGODB_WIRED_TIGER_JOURNAL_COMPRESSOR}" ]] && STARTCMD="${STARTCMD} --wiredTigerJournalCompressor ${MONGODB_WIRED_TIGER_JOURNAL_COMPRESSOR}"
    [[ -n "${MONGODB_WIRED_TIGER_DIRECTORY_FOR_INDEXES}" ]] && STARTCMD="${STARTCMD} --wiredTigerDirectoryForIndexes ${MONGODB_WIRED_TIGER_DIRECTORY_FOR_INDEXES}"
    [[ -n "${MONGODB_WIRED_TIGER_COLLECTION_BLOCK_COMPRESSOR}" ]] && STARTCMD="${STARTCMD} --wiredTigerCollectionBlockCompressor ${MONGODB_WIRED_TIGER_COLLECTION_BLOCK_COMPRESSOR}"
    [[ -n "${MONGODB_WIRED_TIGER_INDEX_PREFIX_COMPRESSION}" ]] && STARTCMD="${STARTCMD} --wiredTigerIndexPrefixCompression ${MONGODB_WIRED_TIGER_INDEX_PREFIX_COMPRESSION}"
    [[ -n "${MONGODB_AWS_IAM_SESSION_TOKEN}" ]] && STARTCMD="${STARTCMD} --awsIamSessionToken ${MONGODB_AWS_IAM_SESSION_TOKEN}"
    [[ "${MONGODB_SSL_ON_NORMAL_PORTS}" == "true" || "${MONGODB_SSL_ON_NORMAL_PORTS}" == "1" ]] && STARTCMD="${STARTCMD} --tlsOnNormalPorts"
    [[ -n "${MONGODB_SSL_MODE}" ]] && STARTCMD="${STARTCMD} --tlsMode ${MONGODB_SSL_MODE}"
    [[ -n "${MONGODB_SSL_CERTIFICATE_KEY_FILE}" ]] && STARTCMD="${STARTCMD} --tlsCertificateKeyFile ${MONGODB_SSL_CERTIFICATE_KEY_FILE}"
    [[ -n "${MONGODB_SSL_CERTIFICATE_KEY_FILE_PASSWORD}" ]] && STARTCMD="${STARTCMD} --tlsCertificateKeyFilePassword ${MONGODB_SSL_CERTIFICATE_KEY_FILE_PASSWORD}"
    [[ -n "${MONGODB_SSL_CLUSTER_FILE}" ]] && STARTCMD="${STARTCMD} --tlsClusterFile ${MONGODB_SSL_CLUSTER_FILE}"
    [[ -n "${MONGODB_SSL_CLUSTER_PASSWORD}" ]] && STARTCMD="${STARTCMD} --tlsClusterPassword ${MONGODB_SSL_CLUSTER_PASSWORD}"
    [[ -n "${MONGODB_SSL_CA_FILE}" ]] && STARTCMD="${STARTCMD} --tlsCAFile ${MONGODB_SSL_CA_FILE}"
    [[ -n "${MONGODB_SSL_CLUSTER_CA_FILE}" ]] && STARTCMD="${STARTCMD} --tlsClusterCAFile ${MONGODB_SSL_CLUSTER_CA_FILE}"
    [[ -n "${MONGODB_SSL_CRL_FILE}" ]] && STARTCMD="${STARTCMD} --tlsCRLFile ${MONGODB_SSL_CRL_FILE}"
    [[ -n "${MONGODB_SSL_DISABLED_PROTOCOLS}" ]] && STARTCMD="${STARTCMD} --tlsDisabledProtocols ${MONGODB_SSL_DISABLED_PROTOCOLS}"
    [[ "${MONGODB_SSL_ALLOW_CONNECTIONS_WITHOUT_CERTIFICATES}" == "true" || "${MONGODB_SSL_ALLOW_CONNECTIONS_WITHOUT_CERTIFICATES}" == "1" ]] && STARTCMD="${STARTCMD} --tlsAllowConnectionsWithoutCertificates"
    [[ "${MONGODB_SSL_ALLOW_INVALID_HOSTNAMES}" == "true" || "${MONGODB_SSL_ALLOW_INVALID_HOSTNAMES}" == "1" ]] && STARTCMD="${STARTCMD} --tlsAllowInvalidHostnames"
    [[ "${MONGODB_SSL_ALLOW_INVALID_CERTIFICATES}" == "true" || "${MONGODB_SSL_ALLOW_INVALID_CERTIFICATES}" == "1" ]] && STARTCMD="${STARTCMD} --tlsAllowInvalidCertificates"
    [[ "${MONGODB_SSL_FIPS_MODE}" == "true" || "${MONGODB_SSL_FIPS_MODE}" == "1" ]] && STARTCMD="${STARTCMD} --tlsFIPSMode"
    [[ -n "${MONGODB_SSL_LOG_VERSIONS}" ]] && STARTCMD="${STARTCMD} --tlsLogVersions ${MONGODB_SSL_LOG_VERSIONS}"

    if [[ "${MONGODB_PERFORM_REPAIR}" == "true" || "${MONGODB_PERFORM_REPAIR}" == "1" ]]; then
        echo "> performing repair"
        ${STARTCMD} --repair
    fi

    if [[ "${MONGODB_PERFORM_UPGRADE}" == "true" || "${MONGODB_PERFORM_UPGRADE}" == "1" ]]; then
        echo "> performing upgrade"
        ${STARTCMD} --upgrade
    fi

    if [[ "${MONGODB_AUTH}" == "true" || "${MONGODB_AUTH}" == "1" ]]; then
        echo "> start local service"
        ${STARTCMD} --fork --logpath ${MONGODB_LOGPATH:-/dev/stdout} --bind_ip 127.0.0.1

        if [[ -n "${MONGODB_ROOT_USERNAME}" && -n "${MONGODB_ROOT_PASSWORD}" ]]; then
            if [[ "$(mongo --quiet --eval "print(db.system.users.find({user:'${MONGODB_ROOT_USERNAME}'}).count())" admin)" == "0" ]]; then
                echo "> create root user"
                mongo --quiet --eval "db.createUser({user: '${MONGODB_ROOT_USERNAME}', pwd: '${MONGODB_ROOT_PASSWORD}', roles: ['readWriteAnyDatabase','dbAdminAnyDatabase','userAdminAnyDatabase','clusterAdmin']})" admin
            else
                echo "> update root user"
                mongo --quiet --eval "db.changeUserPassword('${MONGODB_ROOT_USERNAME}', '${MONGODB_ROOT_PASSWORD}')" admin
            fi
        fi

        if [[ -n "${MONGODB_USERNAME}" && -n "${MONGODB_PASSWORD}" ]]; then
            MONGODB_DATABASE=${MONGODB_DATABASE:-$MONGODB_USERNAME}
            if [[ "$(mongo --quiet --eval "print(db.system.users.find({user:'${MONGODB_USERNAME}'}).count())" admin)" == "0" ]]; then
                echo "> create additional user"
                mongo --quiet --eval "db.createUser({user: '${MONGODB_USERNAME}', pwd: '${MONGODB_PASSWORD}', roles: [{role: 'readWrite', db: '${MONGODB_DATABASE}'}]})" ${MONGODB_AUTH_DB}
            else
                echo "> update additional user"
                mongo --quiet --eval "db.changeUserPassword('${MONGODB_USERNAME}', '${MONGODB_PASSWORD}')" ${MONGODB_AUTH_DB}
            fi
        fi

        echo "> stop local service"
        ${STARTCMD} --shutdown
    fi

    [[ "${MONGODB_SYSLOG}" == "true" || "${MONGODB_SYSLOG}" == "1" ]] && STARTCMD="${STARTCMD} --syslog"
    [[ -n "${MONGODB_LOGPATH}" ]] && STARTCMD="${STARTCMD} --logpath ${MONGODB_LOGPATH}"
    [[ "${MONGODB_LOGAPPEND}" == "true" || "${MONGODB_LOGAPPEND}" == "1" ]] && STARTCMD="${STARTCMD} --logappend"
    [[ -n "${MONGODB_LOGROTATE}" ]] && STARTCMD="${STARTCMD} --logRotate ${MONGODB_LOGROTATE}"
    [[ "${MONGODB_NOAUTH}" == "true" || "${MONGODB_NOAUTH}" == "1" ]] && STARTCMD="${STARTCMD} --noauth"
    [[ "${MONGODB_AUTH}" == "true" || "${MONGODB_AUTH}" == "1" ]] && STARTCMD="${STARTCMD} --auth"

    echo "> starting mongodb service"
    exec ${STARTCMD} --bind_ip_all
popd >/dev/null
